================================================================================
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
================================================================================

$Id$

                         =================================
                         Apache Tomcat 6.0 Patch Proposals
                         =================================


RELEASE SHOWSTOPPERS:


PATCHES ACCEPTED TO BACKPORT:
  [ start all new proposals below, under PATCHES PROPOSED. ]


PATCHES PROPOSED TO BACKPORT:
  [ New proposals should be added at the end of the list ]

* Backport cleanup of semantics of thisAccessedTime and
  lastAccessedTime for sessions:
  - preparational whitespace changes
    http://svn.apache.org/viewvc?rev=711695&view=rev
  - Give thisAccessedTime and lastAccessedTime for sessions
    a clear semantics:
    http://svn.apache.org/viewvc?rev=711711&view=rev
    - thisAccessedTime will be updated at the beginning and
      at the end of session use
    - lastAccessedTime will only be updated at the end of
      session use
    This means:
    - lastAccessedTime is the last access time of a session
      disregarding any request still being processed on.
      So this is good to use even from within a request
      to detect when its own session has been used last before.
    - thisAccessedTime already gets updated when a new request
      disregarding any request still being processed on.
      So this is better for any idleness check or information.
    - thisAccessedTime >= lastAccessedTime always
  - Port from StandardSession to DeltaSession
    http://svn.apache.org/viewvc?rev=711714&view=rev
  - Expose thisAccessedTime via the session interface
    and ManagerBase, so we can use it from outside the session.
    http://svn.apache.org/viewvc?rev=711716&view=rev
  - Make the classes checking session idleness use thisAccessedTime.
    http://svn.apache.org/viewvc?rev=711720&view=rev
    This is not for invalidation, only for displaying
    idle times and making persistance decisions.
  +1: rjung
   0: billbarker: generally agree with remm that this is too big of a change for the stable branch
                 but could agree to some of it if it was split into parts
   0: markt: Agree with Bill - smaller parts would be better
  -1: remm: no for TC 6.0
  -1: funkman : api change in Session.java for .x.x release

* Fix the maven stuff for the maven repo.
  Before it does't find tomcat-juli.jar and the remoteRepository seems broken .
  http://people.apache.org/~jfclere/patches/maven.patch
  +1: jfclere
  -1: fhanik - easier to pass in the root path (lib/bin) to the macro instead of hacking around it
               if we remove the SCP auto feature, then there should be something to replace it with
               (http://ant.apache.org/manual/OptionalTasks/scp.html)  

* Fix various EL TCK failures
  http://svn.apache.org/viewvc?view=rev&rev=899653 (signatures)
   +1: markt, kkolinko, fhanik
   -1:

  http://svn.apache.org/viewvc?view=rev&rev=899769 (CCE expected)
  http://svn.apache.org/viewvc?view=rev&rev=899770 (CCE expected)
   +1: markt, kkolinko, fhanik
   -1:
     kkolinko: Maybe better name for that message, because it says about
     arrays, yet name is rather generic

  http://svn.apache.org/viewvc?view=rev&rev=899783 (ELException expected)
   +1: markt, kkolinko, fhanik
   -1:

  http://svn.apache.org/viewvc?view=rev&rev=899788 (PNFE expected)
   +1: markt, kkolinko, fhanik
   -1:
     kkolinko: I think o.a.jasper.el.ELResolverImpl#getType(ELContext,Object,Object)
     should likewise throw a PropertyNotFoundException instead of returning null.
     I have no test, though.

  http://svn.apache.org/viewvc?view=rev&rev=899792 (ELException rather than IAE)
   +1: markt, kkolinko, fhanik
   -1:

  http://svn.apache.org/viewvc?view=rev&rev=899916 (ELException rather than IAE)
   +1: markt, kkolinko, fhanik
   -1:

  http://svn.apache.org/viewvc?view=rev&rev=899918 (Enum coercion test cases)
  http://svn.apache.org/viewvc?view=rev&rev=899919 (Enum coercion bug)
  http://svn.apache.org/viewvc?rev=909875&view=rev (kkolinko's review - toString())
   +1: markt, kkolinko, fhanik
   -1:

  http://svn.apache.org/viewvc?view=rev&rev=899935 (ELException expected)
  +1: markt, kkolinko, fhanik
  -1:

  http://svn.apache.org/viewvc?view=rev&rev=899949 (ignore whitespace on comp)
  +1: markt, kkolinko, fhanik
  -1:
     kkolinko: Why ValueExpressionImpl.equals() is implemented as comparing
     the hash codes? What will happen with false positives?
     markt: Not sure why hashCode() was used. It was part of the original
            implementation. I'm not concerned. False positives should be very,
            very rare.

* Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48627
  Regression in re-working of EL parsing
  Keep literals as literals
  Also handle deferredSyntaxAllowedAsLiteral
  JUnit test cases and TCK passes with this patch
  OP confirms patch fixes issue
  Combined patch file, from revs.904949, 905226, 906465:
  https://issues.apache.org/bugzilla/attachment.cgi?id=24925
  +1: kkolinko, markt
  -1:

* Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48050
  NamingContext.createSubcontext method returns Context with wrong name
  Based on a suggestion by gingyang.xu
  http://svn.apache.org/viewvc?rev=905722&view=rev
  +1: markt, fhanik
  -1: kkolinko:
    The name should be the full name, not just the last component of it.
    NamingContext.isWritable() will be broken otherwise.

* Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48678
  Having two server fields in the type hierarchy was causing unexpected
  behaviour
  http://svn.apache.org/viewvc?rev=907311&view=rev
  +1: markt, jfclere, fhanik
  -1: 

* Mark the host-manager docs as todo
  http://svn.apache.org/viewvc?rev=907513&view=rev
  +1: markt, jfclere, fhanik
  -1: 

* Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48668
  Don't look for EL matches (which swallow the EL match string) if EL is not
  enabled
  http://svn.apache.org/viewvc?rev=907538&view=rev
  +1: markt, kkolinko, fhanik
  -1: 

  Additional patch:
  http://svn.apache.org/viewvc?rev=907864&view=rev
  +1: kkolinko, markt, fhanik
  -1:

* Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48660
  Vary should add to Vary header rather than over-write it
  http://svn.apache.org/viewvc?rev=907544&view=rev
  +1: markt, jfclere, fhanik
  -1: kkolinko:
    Note, that having multiple Vary headers is not compliant with RFC 2616

    4.2 Message Headers says:

    > Multiple message-header fields with the same field-name MAY be present
    > in a message if and only if the entire field-value for that header
    > field is defined as a comma-separated list [i.e., #(values)].

    14.44 Vary says:

    > Vary  = "Vary" ":" ( "*" | 1#field-name )

    thus the condition described in 4.2 is not met. Also if we are going to
    concatenate values here, "*" value will require special processing.

    http://tools.ietf.org/html/rfc2616


* More memory leak protection
  We can do something about threads started via java.util.Timer
  http://svn.apache.org/viewvc?rev=907652&view=rev
  +1: markt, kkolinko, fhanik
  -1: 

* Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48109
  Extend try/finally to ensure InputStream is closed
  http://svn.apache.org/viewvc?rev=907819&view=rev
  +1: markt, kkolinko, fhanik
  -1: 

* Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48694
  Avoid potential deadlock in WebappClassLoader
  OP confirms patch fixes the deadlock
  https://issues.apache.org/bugzilla/show_bug.cgi?id=48694#c1
  +1: markt, jfclere, kkolinko
  -1: 
   kkolinko: Looking at how URLClassLoader.findClass() is implemented, I
   think that concurrent access to WebappClassLoader.findClass() should not
   be allowed.  URLClassLoader.findClass() is a protected method, but it is
   public in URLClassLoader.  I think we should change its access qualifier
   to be 'protected' in TC7.


* Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48716
  Provide an undocumented 'shoot yourself in the foot' option to disable the
  JULI logging reset on context stop
  http://svn.apache.org/viewvc?rev=908754&view=rev
  +1: markt, fhanik, kkolinko
  -1: 

* More memory leak prevent - ResourceBundle
  http://svn.apache.org/viewvc?rev=909097&view=rev (original)
  http://svn.apache.org/viewvc?rev=909525&view=rev (improvements)
  +1: markt, kkolinko, fhanik
  -1: 
    kkolinko: Calling ResourceBundle.clearCache(CL) would work on any Java
    6+ JVM, not only Sun's

* Improvements for WebappClassLoader#clearThreadLocalMap:
  http://svn.apache.org/viewvc?rev=908002&view=rev
  http://svn.apache.org/viewvc?rev=909206&view=rev
  http://svn.apache.org/viewvc?rev=909212&view=rev
  +1: kkolinko, markt, fhanik
  -1:

* Memory leak detection for JMX and manager
  http://people.apache.org/~markt/patches/2010-02-12-memory-leak-detection.patch
  +1: markt
  -1: kkolinko:
    - It does not compile, because WebappClassLoader.isStarted() was absent.
    - /findleaks was not mapped to ManagerServlet
    Updated patch proposed below.

  Alternative proposal:
  http://people.apache.org/~kkolinko/patches/2010-02-16_tc6_memory-leak-detection.patch
  It is corrected markt's patch
  (Added revs.909204,910584,910612
   TC 6 specifics: /findleaks should be explicitly mapped in web.xml,
   where TC 7 uses /text/findleaks, and that URL is mentioned in manager-howto.xml)
  +1: kkolinko, fhanik
  -1:

  kkolinko: Some further thoughts on naming/messages/documentation
   - It might be not so clear to a newcomer, that to use this functionality you have
     a) Use you application
     b) Reload it
     c) Press the "Find leaks" button
     It does not work without a) and b).

   - Saying that application "triggered" a memory leak sounds too harsh for
   me. I think "has" or "suffered" would be better here.

   - It is safe to press the "Find leaks" button several times. Besides the
   gc call it just "lists" the contexts that are still present in memory.
   It does not clear its own list.

  kkolinko: The display fix for ROOT context (r910612) might be applied to
   StandardHost.findReloadedContextMemoryLeaks() as well. Any comments? If
   results of a JMX call are displayed to humans, I'd be better to have "/"
   instead of an empty string.


* Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48371
  Take account of comments when working out where to insert generated web.xml 
  http://people.apache.org/~markt/patches/2010-02-13-bug48371.patch
  +1: markt, fhanik
  -1: 

* Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48384
  Add a per context xslt option for directory listings
  Make the fallback options work as described in the docs
  http://svn.apache.org/viewvc?rev=909887&view=rev
  +1: markt, fhanik
  -1: 

* Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48545
  Truststores don't have to have passwords
  Based on a patch by 'smmwpf54'
  http://svn.apache.org/viewvc?view=revision&revision=910266
  +1: markt
  -1: jfclere: Doc says it should use keystorePass (http://tomcat.apache.org/tomcat-6.0-doc/config/http.html).
               so that would break existing configurations.

* Workaround https://issues.apache.org/bugzilla/show_bug.cgi?id=48498
  Avoid ArrayIndexOutOfBoundsException triggered by Java 6/7 XML parser bug
  http://svn.apache.org/viewvc?rev=910370&view=rev
  +1: markt
  -1: 

* Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48589
  Make JNDIRealm easier to extend
  Based on a patch by Candid Dauth
  http://svn.apache.org/viewvc?rev=910485&view=rev
  +1: markt
  -1: 
   kkolinko: mark User constructor as protected, replace ArrayList argument
    with a List, and maybe address sebb's comments to r910485 on dev@

* Various manifest improvements
  http://people.apache.org/~markt/patches/2010-02-16-manifest-improvements.patch
  +1: markt, fhanik, kkolinko
  -1: 

* Update bundled TC-Native to 1.1.20
  I think there is no need to update "recommended" version number here.
  http://svn.apache.org/viewvc?rev=915226&view=rev
  +1: kkolinko, mturk
  -1:
